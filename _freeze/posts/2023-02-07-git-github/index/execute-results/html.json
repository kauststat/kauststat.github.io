{
  "hash": "baf1b1a39d7890535fef14544868667b",
  "result": {
    "markdown": "---\ntitle: \"How to promote your research and yourself with `Git` and `GitHub`\"\ndescription: \"As a researcher, sharing your results is crucial if you want them to be useful. One way to do this is using `Git` for version control and `GitHub` as a public repository. In this tutorial, we will learn how to use these tools.\"\nnumber-sections: true  \nauthor:\n  - name: André Victor Ribeiro Amaral\n    url: https://www.avramaral.com/\n    orcid: 0000-0003-3748-6801\n    affiliation: King Abdullah University of Science and Techonology\n    affiliation-url: https://cemse.kaust.edu.sa/stat\ndate: 2023-02-07\ncategories: [Tutorial, Git, GitHub] \ncitation: \n  url: https://kauststat.github.io/posts/2023-02-07-git-github/ \nimage: images/preview.jpg\ndraft: false \nexecute:\n  eval: false\n---\n\n# Introduction\n\n`Git` is a **distributed version control system** software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively writing source code during software development. On the other hand, `GitHub` is a cloud platform for software development and **version control** using Git (adapted from [here](https://en.wikipedia.org/wiki/Git) and [here](https://en.wikipedia.org/wiki/GitHub)).\n\n## Preliminaries\n\nFirstly, I will assume `macOS` as the Operating System (OS) for this tutorial. Some instructions (in particular, @sec-SSHsettings) will be OS dependent. For a broader discussion on how to set SSH keys on other platforms, you may refer to [this tutorial](https://happygitwithr.com/ssh-keys.html).\n\nAlso, specially for the first part of this tutorial, we will do the commands manually. To do this, we will use the terminal from `macOS` (the same applies to the terminal from Linux distributions; and for Windows users, refer to [this link](https://gitforwindows.org/)). \n\nTo access the terminal, on the `macOS`, press `Command + space bar`, and type `terminal`. The below image shows what the terminal looks like.\n\n![](images/terminal.png)\n\nMany things can be done using the terminal, but for this tutorial we will focus on a specific set of instructions. In particular, other that the Git specific commands, we will use\n\n- `cd`: change directory\n- `mkdir`: create a directory\n- `ls`: list files (`ls -a`: also list hidden files)\n- `touch`: create a file\n- `open`: open a file\n- `nano`: edit a file using the `nano` text editor\n\n## Installation\n\nTo download and install Git, refer to [https://git-scm.com/downloads](https://git-scm.com/downloads) (or [https://github.com/git-guides/install-git](https://github.com/git-guides/install-git)). And to verify if Git was successfully installed, type `git --version` on the terminal.\n\nTo create a GitHub account, go to [https://github.com/](https://github.com/), click on `Sign Up`, and follow the instructions.\n\n# General Procedure \n\nAs an overview, first, we must navigate to the project folder on the terminal using the `cd` command, so that we can create a local repository using the `git init` command. Then, the following steps are represented in the image below (this diagram was inspired by [this video](https://www.youtube.com/watch?v=3fUbBnN_H2c)).\n\n![](images/general_idea.png)\n\nThis means that we can use the `git add`, `git commit`, `git push`, and `git clone` commands to move files along compartments. Also, notice that the changes are tracked and saved in the **Commit history**.\n\n# First steps\n\nAfter installing `Git`, it is important to set an username and your email address (the same as from your GitHub account). To do this, on the terminal\n```{.bash}\ngit config --global user.name 'username'\ngit config --global user.email 'email@email.com'\n```\nReplacing `'username'` and `'email@email.com'` by the appropriate values.\n\nAnd to check the values, one can use the following commands\n```{.bash}\ngit config user.name\ngit config user.email\n```\n\nAlthough the next step is not mandatory, it is a good practice to change the name of the main branch from `master` to `main`, (for consistency with GitHub guidelines). We can do this using the following command\n```{.bash}\ngit config --global init.defaultBranch main\n```\n\n## Creating your first repository\n\nLet's create our first repository. To do this, on the terminal (if on Windows, the `cmd`), navigate to your `Desktop` directory, and create a new folder named `GitTutorial`. Depending on your directories structure, you can do this in the following way\n```{.bash}\ncd ~/Desktop/\nmkdir GitTutorial\ncd GitTutorial\n```\n\nFinally, to create/initialize a repository, use the `git init` command. That is,\n```{.bash}\ngit init\n```\n\nTo make sure that a repository was created, you can look for the `.git` folder by typing the `ls -a` command. On the other hand, if you want to delete the `.git` folder (and therefore, the repository settings), you can type `rm -rf .git`.\n\n## Moving files to the Staging area\n\nNow, let’s create some non-significant files on `/GitTutorial/`, so that we can see how to work with them. You can do this by typing `touch file1.R file2.R` (or you can create them manually). For this situation, we would have the following files structure\n\n```{.bash}\nDesktop/\n└── GitTutorial/\n    ├── .git/\n    ├── file1.R\n    └── file2.R\n```\n\nTo see these files' status, you can use the `git status` command.\n\nAlso, you can send a file (e.g., `file1.R`) to the **Staging area** with the `git add file1.R` command (to send all files at once, use `git add .`).\n\nAfter doing this, run `git status` again.\n\nYou can remove a file (e.g., `file1.R`) from the **Staging area** with the `git rm --cached file1.R` command. After doing this, run the `git status` command one more time. \n\nBefore going to the next subsection send all files to the **Staging area** with\n```{.bash}\ngit add .\n```\n\n## Creating commits\n\nA **commit** can be seen as a *safe point*. Meaning that you can always refer back to them, if needed. To create a commit (based on the **Staging area**), use the following command\n```{.bash}\ngit commit -m 'meaningful but short message'\n```\n\nFor example, you can start your list of commits with the following command\n```{.bash}\ngit commit -m 'initial commit'\n```\n\nYou can check the status of your repository using the `git status` command. Also, to see the log of commits, use the `git log` command.\n\nNow, modify `file1.R` and do all steps again. In particular, use the following commands\n```{.bash}\nnano file1.R # to modify the file1.R\ngit status\ngit add .\ngit status\ngit commit -m 'modify file1'\ngit status\ngit log\n```\n\nTo go back in time and revert your project to one of your safe points (i.e., to one of your previous commits), you can use the following commands\n```{.bash}\ngit log # and copy the commit key; e.g., 42037c4bf5c1fe189a62632b393f6971979d8bf4\ngit revert --no-commit 42037c4bf5c1fe189a62632b393f6971979d8bf4..HEAD\ngit commit -m 'back to old version X'\n```\n\nNotice that there are different ways to do this (getting back to a point in the past), but **never** delete your history of commits. After all, that is the main reason why you should use Git: **for tracking your changes**.\n\nIf you want to visit older commits, use the `git checkout (commit key)` command. To come back, use the `git switch -` command.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Pushing files to GitHub\n\nAssuming you already have a GitHub account (if not, you can click [here](https://github.com/) to create one), we can [create a new repository **on Github**](https://github.com/new).\n\n![](images/new_repository.png)\n\nNow, since we want to “push an existing repository from the command line” (for example, the repository we have just created in `/stat294/`), all we need to do is\n\n```{bash, eval = FALSE}\ngit remote add origin https://github.com/user/repository.git\ngit branch -M main \ngit push -u origin main\n```\n\n\nHowever, there are a few important comments to be made.\n\n1. In the first line, notice that `user` and `repository` have to be replaced by the appropriate values. Also, after setting an SSH key, we will see how to rewrite the first line in the correct way\n2. Recently, the default name of the main branch was modified from `master` to `main`, as in the second line. You can use the `git branch` command to verify the current name. Also, the second line may not be necessary if you already redefine your standard main branch name.\n3. Using the `git push` command right away will likely lead to an error due to authentication issues. We will fix it now.\n\n### SSH settings\n\nSince it is no longer possible to connect to GitHub using just your username and password, we have to set a SSH (Secure Shell, which is a cryptographic network protocol) key.\n\nTo do this, based on [this guide](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent), do the following.\n\n1. On the terminal, enter the following command (replacing `email@email.com` by your email address).\n```{.bash}\nssh-keygen -t ed25519 -C 'email@email.com'\n```\nThe above command will create a new SSH key using your email address as a label. As a remark, you can accept the default file location and create an empty password.\n2. Now, you will add your SSH key to the ssh-agent. To do this, use the following command\n```{.bash}\neval \"$(ssh-agent -s)\"\n```\n3. The next step is to modify your `~/.ssh/config` file to automatically load keys into the ssh-agent. This can be done by using the following command \n```{.bash}\nopen ~/.ssh/config\n```\nHowever, if such a file does not exist, it may be necessary to create it with\n```{.bash}\ntouch ~/.ssh/config\n```\nFinally, after opening your `~/.ssh/config` file, you can modify it by pasting the following lines\n```{.bash}\nHost *\n  AddKeysToAgent yes\n  UseKeychain yes\n  IdentityFile ~/.ssh/id_ed25519\n```\n4. Now you can add your SSH private key to the ssh-agent with\n```{.bash}\nssh-add -K ~/.ssh/id_ed25519\n```\n5. The final step is adding the newly created SSH key to your GitHub account. To do this, based on [this guide](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account), copy the SSH public key to your clipboard with the following command\n```{.bash}\npbcopy < ~/.ssh/id_ed25519.pub\n```\nNow, on your GitHub profile, go to `Settings` → `SSH and GPC keys` and click on the `New SSH key` button.\n\nOn the new `SSH keys / Add new` page, paste your SSH public key into the `Key` field, and click on the `Add SSH key` button.\n\nAs a final comment, and as discussed in [this thread](https://gist.github.com/developius/c81f021eb5c5916013dc), if you try to use the `git push -u origin main` command and it still does not work (recall that we are using the SSH protocol, as opposed to the HTTPS protocol), you may have to run the following line\n```{.bash}\ngit remote set-url origin git@github.com:user/repository.git\n```\n\nThen, you can push your files to GitHub.\n```{.bash}\ngit push -u origin main\n```\n\n### Creating a README file\n\nSince we did not create a `README.md` file, we can do it now. On the terminal, assuming the correct directory,\n```{.bash}\ntouch README.md\nnano README.md\n```\nThe second line allows you to edit the file using the `nano` text editor. Alternatively, you can use any other software to do this. Also, you can use the `markdown` language to format this document (the same as in `RMarkdown`).\n\nNext, let's do the necessary steps to push this new change to our GitHub repository; that is,\n```{.bash}\ngit add README.md\ngit commit -m 'add readme file'\ngit push origin main\n```\n\nAfter doing this, check you repository page on GitHub!\n\n## Pulling files from another repository\n\nNow, suppose that you have to retrieve files from an existing repository. You can do this using the `clone` and `pull` commands. To do this, \n\n1. On GitHub, navigate to the desired repository (e.g., [this one](#)), go to `Code` → `SSH`, and copy the address (e.g., `git@github.com:username/repository.git`).\n2. On the terminal, navigate to the desired folder using the `cd` command, and type\n```{.bash}\ngit clone git@github.com:username/repository.git\n```\n\nIf the repository got updated and you want to incorporate these changes, you can use the `git pull` command. To check the linked remote repositories, you may use `git remote -v`; and if there are more than one, it may be necessary to specify it through the more complete (for example) `git pull origin` command. After getting a copy (of a repository that you own), **all other commands can be applied**.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}