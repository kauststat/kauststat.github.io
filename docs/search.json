[
  {
    "objectID": "posts/2023-02-07-git-github/index.html",
    "href": "posts/2023-02-07-git-github/index.html",
    "title": "How to promote your research and yourself with Git and GitHub",
    "section": "",
    "text": "Git is a distributed version control system software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively writing source code during software development. On the other hand, GitHub is a cloud platform for software development and version control using Git (adapted from here and here).\n\n\nFirstly, I will assume macOS as the Operating System (OS) for this tutorial. Some instructions (in particular, Section 3.4.1) will be OS dependent. For a broader discussion on how to set SSH keys on other platforms, you may refer to this tutorial.\nAlso, specially for the first part of this tutorial, we will do the commands manually. To do this, we will use the terminal from macOS (the same applies to the terminal from Linux distributions; and for Windows users, refer to this link).\nTo access the terminal, on the macOS, press Command + space bar, and type terminal. The image below shows what the terminal looks like.\n\nMany things can be done using the terminal, but for this tutorial we will focus on a specific set of instructions. In particular, other that the Git specific commands, we will use\n\ncd: change directory\nmkdir: create a directory\nls: list files (ls -a: also list hidden files)\ntouch: create a file\nopen: open a file\nnano: edit a file using the nano text editor\n\n\n\n\nTo download and install Git, refer to https://git-scm.com/downloads (or https://github.com/git-guides/install-git). And to verify if Git was successfully installed, type git --version on the terminal.\nTo create a GitHub account, go to https://github.com/, click on Sign Up, and follow the instructions."
  },
  {
    "objectID": "posts/2023-02-07-git-github/index.html#creating-your-first-repository",
    "href": "posts/2023-02-07-git-github/index.html#creating-your-first-repository",
    "title": "How to promote your research and yourself with Git and GitHub",
    "section": "3.1 Creating your first repository",
    "text": "3.1 Creating your first repository\nLet’s create our first repository. To do this, on the terminal (if on Windows, the cmd), navigate to your Desktop directory, and create a new folder named GitTutorial. Depending on your directories structure, you can do this in the following way\ncd ~/Desktop/\nmkdir GitTutorial\ncd GitTutorial\nFinally, to create/initialize a repository, use the git init command. That is,\ngit init\nTo make sure that a repository was created, you can look for the .git folder by typing the ls -a command. On the other hand, if you want to delete the .git folder (and therefore, the repository settings), you can type rm -rf .git."
  },
  {
    "objectID": "posts/2023-02-07-git-github/index.html#moving-files-to-the-staging-area",
    "href": "posts/2023-02-07-git-github/index.html#moving-files-to-the-staging-area",
    "title": "How to promote your research and yourself with Git and GitHub",
    "section": "3.2 Moving files to the Staging area",
    "text": "3.2 Moving files to the Staging area\nNow, let’s create some non-significant files on /GitTutorial/, so that we can see how to work with them. You can do this by typing touch file1.R file2.R (or you can create them manually). For this situation, we would have the following files structure\nDesktop/\n└── GitTutorial/\n    ├── .git/\n    ├── file1.R\n    └── file2.R\nTo see these files’ status, you can use the git status command.\nAlso, you can send a file (e.g., file1.R) to the Staging area with the git add file1.R command (to send all files at once, use git add .).\nAfter doing this, run git status again.\nYou can remove a file (e.g., file1.R) from the Staging area with the git rm --cached file1.R command. After doing this, run the git status command one more time.\nBefore going to the next subsection send all files to the Staging area with\ngit add ."
  },
  {
    "objectID": "posts/2023-02-07-git-github/index.html#creating-commits",
    "href": "posts/2023-02-07-git-github/index.html#creating-commits",
    "title": "How to promote your research and yourself with Git and GitHub",
    "section": "3.3 Creating commits",
    "text": "3.3 Creating commits\nA commit can be seen as a safe point. Meaning that you can always refer back to them, if needed. To create a commit (based on the Staging area), use the following command\ngit commit -m 'meaningful but short message'\nFor example, you can start your list of commits with the following command\ngit commit -m 'initial commit'\nYou can check the status of your repository using the git status command. Also, to see the log of commits, use the git log command.\nNow, modify file1.R and do all steps again. In particular, use the following commands\nnano file1.R # to modify the file1.R\ngit status\ngit add .\ngit status\ngit commit -m 'modify file1'\ngit status\ngit log\nTo go back in time and revert your project to one of your safe points (i.e., to one of your previous commits), you can use the following commands\ngit log # and copy the commit key; e.g., 42037c4bf5c1fe189a62632b393f6971979d8bf4\ngit revert --no-commit 42037c4bf5c1fe189a62632b393f6971979d8bf4..HEAD\ngit commit -m 'back to old version X'\nNotice that there are different ways to do this (getting back to a point in the past), but never delete your history of commits. After all, that is the main reason why you should use Git: for tracking your changes.\nIf you want to visit older commits, use the git checkout (commit key) command. To come back, use the git switch - command."
  },
  {
    "objectID": "posts/2023-02-07-git-github/index.html#pushing-files-to-github",
    "href": "posts/2023-02-07-git-github/index.html#pushing-files-to-github",
    "title": "How to promote your research and yourself with Git and GitHub",
    "section": "3.4 Pushing files to GitHub",
    "text": "3.4 Pushing files to GitHub\nAssuming you already have a GitHub account (if not, you can click here to create one), we can create a new repository on Github.\n\nNow, since we want to “push an existing repository from the command line” (for example, the repository we have just created in /GitTutorial/), all we need to do is\ngit remote add origin git@github.com:user/repository.git\ngit branch -M main \ngit push -u origin main\nHowever, there are a few important comments to be made.\n\nIn the first line, notice that user and repository.git have to be replaced by the appropriate values.\nRecently, the default name of the main branch was modified from master to main, as in the second line. You can use the git branch command to verify the current name. Also, the second line may not be necessary if you already re-define your standard main branch name.\nUsing the git push command right away will likely lead to an error due to authentication issues. We will fix it now.\n\n\n3.4.1 SSH settings\nSince it is no longer possible to connect to GitHub using just your username and password, we have to set a SSH (Secure Shell, which is a cryptographic network protocol) key.\nTo do this, based on this guide, do the following.\n\nOn the terminal, enter the following command (replacing email@email.com by your email address).\n\nssh-keygen -t ed25519 -C 'email@email.com'\nThe above command will create a new SSH key using your email address as a label. As a remark, you can accept the default file location and create an empty password.\n\nNow, you will add your SSH key to the ssh-agent. To do this, use the following command\n\neval \"$(ssh-agent -s)\"\n\nThe next step is to modify your ~/.ssh/config file to automatically load keys into the ssh-agent. This can be done by using the following command\n\nopen ~/.ssh/config\nHowever, if such a file does not exist, it may be necessary to create it with\ntouch ~/.ssh/config\nFinally, after opening your ~/.ssh/config file, you can modify it by pasting the following lines\nHost github.com\n  AddKeysToAgent yes\n  UseKeychain yes\n  IdentityFile ~/.ssh/id_ed25519\nAs a remark, if you chose not to add a password to your key, you should omit the UseKeychain yes line.\n\nNow you can add your SSH private key to the ssh-agent with\n\nssh-add --apple-use-keychain ~/.ssh/id_ed25519\n\nThe final step is adding the newly created SSH key to your GitHub account. To do this, based on this guide, copy the SSH public key to your clipboard with the following command\n\npbcopy < ~/.ssh/id_ed25519.pub\nNow, on your GitHub profile, go to Settings → SSH and GPC keys and click on the New SSH key button.\nOn the new SSH keys / Add new page, paste your SSH public key into the Key field, and click on the Add SSH key button.\nAs a final comment, and as discussed in this thread, if you try to use the git push -u origin main command and it still does not work (recall that we are using the SSH protocol, as opposed to the HTTPS protocol), you may have to run the following lines\ngit config --get remote.origin.url # to check the remote URL\ngit remote set-url origin git@github.com:user/repository.git\nThen, you can push your files to GitHub.\ngit push -u origin main\n\n\n3.4.2 Creating a README file\nSince we did not create a README.md file, we can do it now. On the terminal, assuming the correct directory,\ntouch README.md\nnano README.md\nThe second line allows you to edit the file using the nano text editor. Alternatively, you can use any other software to do this. Also, you can use the markdown language to format this document.\nNext, let’s do the necessary steps to push this new change to our GitHub repository; that is,\ngit add README.md\ngit commit -m 'add readme file'\ngit push origin main\nAfter doing this, check you repository page on GitHub!"
  },
  {
    "objectID": "posts/2023-02-07-git-github/index.html#pulling-files-from-another-repository",
    "href": "posts/2023-02-07-git-github/index.html#pulling-files-from-another-repository",
    "title": "How to promote your research and yourself with Git and GitHub",
    "section": "3.5 Pulling files from another repository",
    "text": "3.5 Pulling files from another repository\nNow, suppose that you have to retrieve files from an existing repository. You can do this using the clone and pull commands. To do this,\n\nOn GitHub, navigate to the desired repository (e.g., this one), go to Code → SSH, and copy the address (e.g., git@github.com:username/repository.git).\nOn the terminal, navigate to the desired folder using the cd command, and type\n\ngit clone git@github.com:username/repository.git\nIf the repository got updated and you want to incorporate these changes, you can use the git pull command. To check the linked remote branches, you may use git remote -v; and if there are more than one, it may be necessary to specify it through the more complete (for example) git pull origin command. After getting a copy (of a repository that you own), all other commands can be applied."
  },
  {
    "objectID": "posts/2023-02-07-git-github/index.html#creating-a-github-repository",
    "href": "posts/2023-02-07-git-github/index.html#creating-a-github-repository",
    "title": "How to promote your research and yourself with Git and GitHub",
    "section": "5.1 Creating a GitHub repository",
    "text": "5.1 Creating a GitHub repository\nAs showed before, create a new repository on Github. After selecting the SSH protocol, copy your repository address. It will look like\ngit@github.com:username/repository.git"
  },
  {
    "objectID": "posts/2023-02-07-git-github/index.html#linking-your-repository-to-rstudio",
    "href": "posts/2023-02-07-git-github/index.html#linking-your-repository-to-rstudio",
    "title": "How to promote your research and yourself with Git and GitHub",
    "section": "5.2 Linking your repository to RStudio",
    "text": "5.2 Linking your repository to RStudio\nFirstly, let’s make sure that RStudio can identify the Git installation (this is automatically done in most cases). To do this, go to Tools → Global Options → Git/SVN and check if the Git executable has the appropriate Git path; if not, this page may help.\nYour settings have to be similar to those shown in the following image. Also, even if you have set your SSH key before, it might not appear in the SSH RSA key field. Here is an explanation of why this may happen.\n\nIn RStudio, go to File → New Project → Version Control → Git, and paste your repository address (from GitHub) on the Repository URL field. The Project directory name will be auto completed. You also have to set the Create project as subdirectory of: option accordingly.\nThe image below shows you how the spaces should be filled. After doing it, click on the Create Project button.\n\nOnce you have created your project and linked it to the RStudio, a Git icon will appear on the top menu, as in the right side of this image.\n\nIf you click on it, and go to the Commit... option (on macOS, you can use the control + option + M shortcut), you will see the following window.\n\nFrom the above image, notice that we can do everything we did manually before, namely, moving items to the Staging area (check the desired boxes under the Staged menu), committing changes, pushing our new files to GitHub (with the Push button on the top right), etc. Here, we can also see the modified files; in this example, a new line has been added to the main.R file.\nFinally, when working with more people, it is a good practice to pull changes from the GitHub repository into your local project before pushing your modified files. This prevents conflicts among versions."
  },
  {
    "objectID": "posts/2023-02-07-git-github/index.html#pushing-a-local-rstudio-project",
    "href": "posts/2023-02-07-git-github/index.html#pushing-a-local-rstudio-project",
    "title": "How to promote your research and yourself with Git and GitHub",
    "section": "5.3 Pushing a local RStudio project",
    "text": "5.3 Pushing a local RStudio project\nAlthough I said it is more common to first create a GitHub repository and then link it to the RStudio, we can also do things in the opposite order. To do this, start by creating a new RStudio project, that is, go to File → New Project → New Directory → New Project and set the Directory name as project name. Do not forget to check the Create a git repository box. And finally, click on the Create Project button.\nYou will end up with a window that looks like the image below.\n\nHowever, after creating the project we still have to connect it to your GitHub repository. To do this, create a new repository on Github (as we have already done before), and copy your repository address (after selecting the SSH protocol). Again, it will look like\ngit@github.com:username/repository.git\nThen, it suffices to run the following commands (to do this inside RStudio, you can open the terminal going to Tools → Terminal → Move Focus to Terminal; it must be already set to the project folder)\ngit init\ngit remote add origin git@github.com:user/user.github.io.git\nFrom this point on, you can do the same procedures we did in the previous sections."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "KAUST STAT",
    "section": "",
    "text": "King Abdullah University of Science and Technology (KAUST) is a private research university located in Thuwal, Saudi Arabia. Founded in 2009, the university provides research and graduate training programs in English as the official language of instruction. KAUST is the first mixed-gender university campus in Saudi Arabia. (Wikipedia, 2023).\n\nThis is KAUST STAT website. Here, you will find our blog and other material produced by the students in our department."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "KAUST STAT Blog",
    "section": "",
    "text": "How to promote your research and yourself with Git and GitHub\n\n\n\n\n\n\n\nTutorial\n\n\nGit\n\n\nGitHub\n\n\n\n\nAs a researcher, sharing your results is crucial if you want them to be useful. One way to do this is using Git for version control and GitHub as a public repository. In this tutorial, we will learn how to use these tools.\n\n\n\n\n\n\nFeb 7, 2023\n\n\nAndré Victor Ribeiro Amaral\n\n\n\n\n\n\nNo matching items"
  }
]